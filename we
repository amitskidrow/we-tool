#!/usr/bin/env bash
set -euo pipefail
# Main 'we' CLI - generates Makefile and README blocks for a module
ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LIB_DIR="$ROOT_DIR/lib/we"
. "$LIB_DIR/common.sh"
. "$LIB_DIR/args.sh"
. "$LIB_DIR/project.sh"
. "$LIB_DIR/fs.sh"
. "$LIB_DIR/watchexec.sh"

main() {
  parse_args "$@"
  resolve_project

  # Auto-accept confirmation when invoked on a directory module
  if [ -d "$MODULE" ]; then
    YES=1
  fi

  # If MAKEFILE_OUT is still the default, change it to be in the PROJECT directory
  if [ "$MAKEFILE_OUT" = "Makefile" ]; then
    MAKEFILE_OUT="$PROJECT/Makefile"
  fi
  # If README_OUT is still the default, change it to be in the PROJECT directory
  if [ "$README_OUT" = "README.md" ]; then
    README_OUT="$PROJECT/README.md"
  fi

  compute_defaults

  if [ "${DRY_RUN:-0}" = "1" ]; then
    echo "DRY RUN: Would generate Makefile and README blocks for service '$SERVICE' in module '$MODULE'"
    exit 0
  fi

  if [ "${README_ONLY:-0}" != "1" ]; then
    upsert_makefile "$MAKEFILE_OUT"
  fi
  if [ "${MK_ONLY:-0}" != "1" ]; then
    upsert_readme "$README_OUT"
  fi
  ensure_gitignore

  echo "we: generated Make block and README block for service '$SERVICE'"
  if [ "${YES:-0}" != "1" ]; then
    confirm "Proceed to write files?" || { echo "aborted"; exit 1; }
  fi

  # Write outputs (fs.sh functions already wrote temp files; ensure move)
  finalize_files "$MAKEFILE_OUT" "$README_OUT"

  echo "Done. Run 'make up' to start the service." 
}

main "$@"
