# BEGIN: we-managed-block
# (generated by we)
SERVICE := $SERVICE
PROJECT := $PROJECT
ENTRY := $ENTRY
WE_SERVICES := $SERVICE

.PHONY: up.\$(SERVICE) down.\$(SERVICE) ps.\$(SERVICE) logs.\$(SERVICE) follow.\$(SERVICE) restart.\$(SERVICE) doctor.\$(SERVICE) unit.\$(SERVICE) journal.\$(SERVICE) up down ps logs follow restart doctor unit journal

# Unit identity
UNIT_SUFFIX := \$(shell python -c "import hashlib,os; import sys; print(hashlib.sha1(os.path.abspath('.').encode()).hexdigest()[:8])")
UNIT := we-\$(SERVICE)-\$(UNIT_SUFFIX)

# Locations
RUNDIR := .we/\$(SERVICE)
RUNLOG := \$(RUNDIR)/run.log
STATE_DIR := \$\${XDG_STATE_HOME:-\$\$(HOME)/.local/state}/we
LOGDIR := \$(STATE_DIR)/\$(SERVICE)/logs
KEEP_N ?= 10
SECURE ?= 0
RELOAD ?= 1
TAIL ?= 100

# watchexec / commands
WEX := $(shell cd "$(PROJECT)/.." && PROJECT="$(PROJECT)" compose_watchexec_cmds(){ WEX=$$(WEX_TEMPLATE); echo "$$WEX"; } && compose_watchexec_cmds)
CMD_RELOAD := cd "\$(PROJECT)" && \$(WEX) uv run --project "\$(PROJECT)" -- \$(ENTRY)
CMD_PLAIN := cd "\$(PROJECT)" && uv run --project "\$(PROJECT)" -- \$(ENTRY)

# ensure directories and RUNLOG symlink, then start under systemd-run
up.\$(SERVICE):
	@cd "\$(PROJECT)/.." && SERVICE="\$(SERVICE)" PROJECT="\$(PROJECT)" ENTRY="\$(ENTRY)" RELOAD="\$(RELOAD)" KEEP_N="\$(KEEP_N)" SECURE="\$(SECURE)" \
	  uv run -- python tools/uuctl.py up

# stop unit and cleanup ephemeral files
down.\$(SERVICE):
	@cd "\$(PROJECT)/.." && SERVICE="\$(SERVICE)" PROJECT="\$(PROJECT)" ENTRY="\$(ENTRY)" \
	  uv run -- python tools/uuctl.py down

# one-line ps output
ps.\$(SERVICE):
	@cd "\$(PROJECT)/.." && SERVICE="\$(SERVICE)" PROJECT="\$(PROJECT)" ENTRY="\$(ENTRY)" \
	  uv run -- python tools/uuctl.py ps

# logs: show tail of RUNLOG, fallback to journal
logs.\$(SERVICE):
	@cd "\$(PROJECT)/.." && SERVICE="\$(SERVICE)" PROJECT="\$(PROJECT)" ENTRY="\$(ENTRY)" TAIL="\$(TAIL)" \
	  uv run -- python tools/uuctl.py logs

# follow logs
follow.\$(SERVICE):
	@cd "\$(PROJECT)/.." && SERVICE="\$(SERVICE)" PROJECT="\$(PROJECT)" ENTRY="\$(ENTRY)" \
	  uv run -- python tools/uuctl.py follow

# restart
restart.\$(SERVICE):
	@cd "\$(PROJECT)/.." && SERVICE="\$(SERVICE)" PROJECT="\$(PROJECT)" ENTRY="\$(ENTRY)" RELOAD="\$(RELOAD)" KEEP_N="\$(KEEP_N)" SECURE="\$(SECURE)" \
	  uv run -- python tools/uuctl.py restart

# foreground doctor mode (no systemd)
doctor.\$(SERVICE):
	@cd "\$(PROJECT)/.." && SERVICE="\$(SERVICE)" PROJECT="\$(PROJECT)" ENTRY="\$(ENTRY)" \
	  uv run -- python tools/uuctl.py doctor

unit.\$(SERVICE):
	@cd "\$(PROJECT)/.." && SERVICE="\$(SERVICE)" PROJECT="\$(PROJECT)" ENTRY="\$(ENTRY)" \
	  uv run -- python tools/uuctl.py unit

journal.\$(SERVICE):
	@cd "\$(PROJECT)/.." && SERVICE="\$(SERVICE)" PROJECT="\$(PROJECT)" ENTRY="\$(ENTRY)" \
	  uv run -- python tools/uuctl.py journal

# unsuffixed guard
# Unsuffixed proxy targets - proxy to the single service or error with hint
DEFAULT_SERVICE := \$(firstword \$(WE_SERVICES))

up:
	@if [ \$(words \$(WE_SERVICES)) -eq 1 ]; then \$(MAKE) up.\$(DEFAULT_SERVICE); else echo "Multiple services: \$(WE_SERVICES). Use SERVICE=<name>"; exit 1; fi

down:
	@if [ \$(words \$(WE_SERVICES)) -eq 1 ]; then \$(MAKE) down.\$(DEFAULT_SERVICE); else echo "Multiple services: \$(WE_SERVICES). Use SERVICE=<name>"; exit 1; fi

ps:
	@if [ \$(words \$(WE_SERVICES)) -eq 1 ]; then \$(MAKE) ps.\$(DEFAULT_SERVICE); else echo "Multiple services: \$(WE_SERVICES). Use SERVICE=<name>"; exit 1; fi

logs:
	@if [ \$(words \$(WE_SERVICES)) -eq 1 ]; then \$(MAKE) logs.\$(DEFAULT_SERVICE); else echo "Multiple services: \$(WE_SERVICES). Use SERVICE=<name>"; exit 1; fi

follow:
	@if [ \$(words \$(WE_SERVICES)) -eq 1 ]; then \$(MAKE) follow.\$(DEFAULT_SERVICE); else echo "Multiple services: \$(WE_SERVICES). Use SERVICE=<name>"; exit 1; fi

restart:
	@if [ \$(words \$(WE_SERVICES)) -eq 1 ]; then \$(MAKE) restart.\$(DEFAULT_SERVICE); else echo "Multiple services: \$(WE_SERVICES). Use SERVICE=<name>"; exit 1; fi

doctor:
	@if [ \$(words \$(WE_SERVICES)) -eq 1 ]; then \$(MAKE) doctor.\$(DEFAULT_SERVICE); else echo "Multiple services: \$(WE_SERVICES). Use SERVICE=<name>"; exit 1; fi

unit:
	@if [ \$(words \$(WE_SERVICES)) -eq 1 ]; then \$(MAKE) unit.\$(DEFAULT_SERVICE); else echo "Multiple services: \$(WE_SERVICES). Use SERVICE=<name>"; exit 1; fi

journal:
	@if [ \$(words \$(WE_SERVICES)) -eq 1 ]; then \$(MAKE) journal.\$(DEFAULT_SERVICE); else echo "Multiple services: \$(WE_SERVICES). Use SERVICE=<name>"; exit 1; fi

# helper lines expected by validator
check-service:
	@echo "check-service placeholder"

# END: we-managed-block
