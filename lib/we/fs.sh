#!/usr/bin/env bash
set -euo pipefail

upsert_makefile(){
  local out=${1:-Makefile}
  local tmp="/tmp/we_make_block.$$"
  
  # Overwrite existing Makefile safely; do not delete .we (it holds logs)
  if [ -f "$out" ]; then
    echo "Rewriting $out"
  fi
  
  # Determine watchexec command
  local wex_cmd=""
  if command -v watchexec &> /dev/null; then
    wex_cmd="watchexec --restart --watch . --exts py --ignore .we --ignore .uu --ignore .git --ignore .venv --"
  else
    wex_cmd="echo 'ERROR: watchexec not found in PATH. Please install it or set RELOAD=0' >&2; exit 1"
  fi
  
  # Generate the Makefile with proper variable substitution
  cat > "$tmp" <<'EOF'
# Quiet by default. Use: make VERBOSE=1 <target>
ifeq ($(VERBOSE),1)
  # Verbose: default GNU make behavior
else
  .SILENT:
  MAKEFLAGS += --no-print-directory
  # MAKEFLAGS += --output-sync=target
endif

# BEGIN: we-managed-block
# (generated by we)
SERVICE := $(SERVICE)
PROJECT := $(PROJECT)
ENTRY := $(ENTRY)
WE_SERVICES := $(SERVICE)

.PHONY: up.$(SERVICE) down.$(SERVICE) ps.$(SERVICE) logs.$(SERVICE) follow.$(SERVICE) restart.$(SERVICE) doctor.$(SERVICE) unit.$(SERVICE) journal.$(SERVICE) watch.$(SERVICE) launch.$(SERVICE) run.$(SERVICE) kill.$(SERVICE) up down ps logs follow restart doctor unit journal watch launch run kill

# Unit identity
UNIT_SUFFIX := $(shell python -c "import hashlib,os; import sys; print(hashlib.sha1(os.path.abspath('.' + os.sep).encode()).hexdigest()[:8])")
UNIT := we-$(SERVICE)-$(UNIT_SUFFIX)

# Locations
RUNDIR := .we/$(SERVICE)
RUNLOG := $(RUNDIR)/run.log
LOGDIR := $(RUNDIR)/logs
KEEP_N ?= 10
SECURE ?= 0
RELOAD ?= 1
TAIL ?= 100

# watchexec / commands
WEX := $(shell command -v watchexec >/dev/null 2>&1 && echo "watchexec --restart --watch . --exts py --ignore .we --ignore .uu --ignore .git --ignore .venv --" || echo "")
CMD_RELOAD := cd "$(PROJECT)" && $(WEX) uv run --project "$(PROJECT)" -- $(ENTRY)
CMD_PLAIN := cd "$(PROJECT)" && uv run --project "$(PROJECT)" -- $(ENTRY)

# ensure directories and RUNLOG symlink, then start under systemd-run
up.$(SERVICE):
	@cd "$(PROJECT)" && SERVICE="$(SERVICE)" PROJECT="$(PROJECT)" ENTRY="$(ENTRY)" RELOAD="$(RELOAD)" KEEP_N="$(KEEP_N)" SECURE="$(SECURE)" \
	  uv run -- python tools/uuctl.py up

# stop unit and cleanup ephemeral files
down.$(SERVICE):
	@cd "$(PROJECT)" && SERVICE="$(SERVICE)" PROJECT="$(PROJECT)" ENTRY="$(ENTRY)" \
	  uv run -- python tools/uuctl.py down

# one-line ps output
ps.$(SERVICE):
	@cd "$(PROJECT)" && SERVICE="$(SERVICE)" PROJECT="$(PROJECT)" ENTRY="$(ENTRY)" \
	  uv run -- python tools/uuctl.py ps

# logs: show tail of RUNLOG, fallback to journal
logs.$(SERVICE):
	@cd "$(PROJECT)" && SERVICE="$(SERVICE)" PROJECT="$(PROJECT)" ENTRY="$(ENTRY)" TAIL="$(TAIL)" \
	  uv run -- python tools/uuctl.py logs

# follow logs
follow.$(SERVICE):
	@cd "$(PROJECT)" && SERVICE="$(SERVICE)" PROJECT="$(PROJECT)" ENTRY="$(ENTRY)" \
	  uv run -- python tools/uuctl.py follow

# restart
restart.$(SERVICE):
	@cd "$(PROJECT)" && SERVICE="$(SERVICE)" PROJECT="$(PROJECT)" ENTRY="$(ENTRY)" RELOAD="$(RELOAD)" KEEP_N="$(KEEP_N)" SECURE="$(SECURE)" \
	  uv run -- python tools/uuctl.py restart

# foreground doctor mode (no systemd)
doctor.$(SERVICE):
	@cd "$(PROJECT)" && SERVICE="$(SERVICE)" PROJECT="$(PROJECT)" ENTRY="$(ENTRY)" \
	  uv run -- python tools/uuctl.py doctor

unit.$(SERVICE):
	@cd "$(PROJECT)" && SERVICE="$(SERVICE)" PROJECT="$(PROJECT)" ENTRY="$(ENTRY)" \
	  uv run -- python tools/uuctl.py unit

journal.$(SERVICE):
	@cd "$(PROJECT)" && SERVICE="$(SERVICE)" PROJECT="$(PROJECT)" ENTRY="$(ENTRY)" \
	  uv run -- python tools/uuctl.py journal

# watch: restart-if-running then follow
watch.$(SERVICE):
	@cd "$(PROJECT)" && SERVICE="$(SERVICE)" PROJECT="$(PROJECT)" ENTRY="$(ENTRY)" RELOAD="$(RELOAD)" \
	  uv run -- python tools/uuctl.py watch

# launch: restart-if-running then show recent logs (alias: run)
launch.$(SERVICE):
	@cd "$(PROJECT)" && SERVICE="$(SERVICE)" PROJECT="$(PROJECT)" ENTRY="$(ENTRY)" RELOAD="$(RELOAD)" \
	  uv run -- python tools/uuctl.py launch

run.$(SERVICE): launch.$(SERVICE)

# kill: stop all we-$(SERVICE)-* user units
kill.$(SERVICE):
	@cd "$(PROJECT)" && SERVICE="$(SERVICE)" PROJECT="$(PROJECT)" ENTRY="$(ENTRY)" \
	  uv run -- python tools/uuctl.py kill

# unsuffixed guard
# Unsuffixed proxy targets - proxy to the single service or error with hint
DEFAULT_SERVICE := \$(firstword \$(WE_SERVICES))

up:
	@if [ $(words $(WE_SERVICES)) -eq 1 ]; then $(MAKE) up.$(DEFAULT_SERVICE); else echo "Multiple services: $(WE_SERVICES). Use SERVICE=<name>"; exit 1; fi

down:
	@if [ $(words $(WE_SERVICES)) -eq 1 ]; then $(MAKE) down.$(DEFAULT_SERVICE); else echo "Multiple services: $(WE_SERVICES). Use SERVICE=<name>"; exit 1; fi

ps:
	@if [ $(words $(WE_SERVICES)) -eq 1 ]; then $(MAKE) ps.$(DEFAULT_SERVICE); else echo "Multiple services: $(WE_SERVICES). Use SERVICE=<name>"; exit 1; fi

logs:
	@if [ $(words $(WE_SERVICES)) -eq 1 ]; then $(MAKE) logs.$(DEFAULT_SERVICE); else echo "Multiple services: $(WE_SERVICES). Use SERVICE=<name>"; exit 1; fi

follow:
	@if [ $(words $(WE_SERVICES)) -eq 1 ]; then $(MAKE) follow.$(DEFAULT_SERVICE); else echo "Multiple services: $(WE_SERVICES). Use SERVICE=<name>"; exit 1; fi

restart:
	@if [ $(words $(WE_SERVICES)) -eq 1 ]; then $(MAKE) restart.$(DEFAULT_SERVICE); else echo "Multiple services: $(WE_SERVICES). Use SERVICE=<name>"; exit 1; fi

doctor:
	@if [ $(words $(WE_SERVICES)) -eq 1 ]; then $(MAKE) doctor.$(DEFAULT_SERVICE); else echo "Multiple services: $(WE_SERVICES). Use SERVICE=<name>"; exit 1; fi

unit:
	@if [ $(words $(WE_SERVICES)) -eq 1 ]; then $(MAKE) unit.$(DEFAULT_SERVICE); else echo "Multiple services: $(WE_SERVICES). Use SERVICE=<name>"; exit 1; fi

journal:
	@if [ $(words $(WE_SERVICES)) -eq 1 ]; then $(MAKE) journal.$(DEFAULT_SERVICE); else echo "Multiple services: $(WE_SERVICES). Use SERVICE=<name>"; exit 1; fi

watch:
	@if [ $(words $(WE_SERVICES)) -eq 1 ]; then $(MAKE) watch.$(DEFAULT_SERVICE); else echo "Multiple services: $(WE_SERVICES). Use SERVICE=<name>"; exit 1; fi

launch:
	@if [ $(words $(WE_SERVICES)) -eq 1 ]; then $(MAKE) launch.$(DEFAULT_SERVICE); else echo "Multiple services: $(WE_SERVICES). Use SERVICE=<name>"; exit 1; fi

run:
	@if [ $(words $(WE_SERVICES)) -eq 1 ]; then $(MAKE) run.$(DEFAULT_SERVICE); else echo "Multiple services: $(WE_SERVICES). Use SERVICE=<name>"; exit 1; fi

kill:
	@if [ $(words $(WE_SERVICES)) -eq 1 ]; then $(MAKE) kill.$(DEFAULT_SERVICE); else echo "Multiple services: $(WE_SERVICES). Use SERVICE=<name>"; exit 1; fi

# helper lines expected by validator
check-service:
	@echo "check-service placeholder"

# END: we-managed-block
EOF
  # Write the makefile
  cat "$tmp" > "$out"
  rm -f "$tmp"
}

upsert_readme(){
  local out=${1:-README.md}
  local tmp="/tmp/we_readme.$$"
  cat > "$tmp" <<'EOF'
<!-- BEGIN: we-readme -->
# Development runner (we)

This project includes a Make block managed by the `we` tool.

Quick commands:

- make up         # start service (idempotent)
- make watch      # up (or restart if active) + follow
- make launch     # up (or restart if active) + logs (alias: run)
- make follow     # tail logs
- make logs       # show last N lines (TAIL=100)
- make down       # stop tracked unit
- make kill       # stop all we-<service>-* units for this user

RELOAD=1 enables live reload via watchexec; set RELOAD=0 to disable. Set SECURE=1 to enable systemd hardening flags.

Make output is quiet by default (only service output). Use `make VERBOSE=1 <target>` for full make chatter.

<!-- END: we-readme -->
EOF
  if [ -f "$out" ]; then
    in_block=0
    : > "$out.trimmed"
    while IFS= read -r line; do
      case "$line" in
        *"BEGIN: we-readme"*) in_block=1; continue;;
        *"END: we-readme"*) in_block=0; continue;;
      esac
      if [ "$in_block" -eq 0 ]; then echo "$line" >> "$out.trimmed"; fi
    done < "$out" || true
    mv "$out.trimmed" "$out"
  fi
  cat "$tmp" >> "$out"
  rm -f "$tmp"
}


ensure_gitignore(){
  if [ ! -f .gitignore ]; then
    echo ".we/" > .gitignore
  else
    if ! grep -q "^\.we/" .gitignore; then
      echo ".we/" >> .gitignore
    fi
  fi
}

finalize_files(){
  # nothing for now; placeholder if we staged temp files
  return 0
}
